"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
/**
 * @packageDocumentation
 * @module api.functional.auth.sign_in.kakao
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
const fetcher_1 = require("@nestia/fetcher");
const typia_1 = __importDefault(require("typia"));
const NestiaSimulator_1 = require("./../../../../utils/NestiaSimulator");
/**
 * @controller SignInKakaoController.execute()
 * @path POST /auth/sign-in/kakao
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function execute(connection, body) {
    return __awaiter(this, void 0, void 0, function* () {
        return !!connection.simulate
            ? execute.simulate(connection, body)
            : fetcher_1.Fetcher.fetch(connection, execute.ENCRYPTED, execute.METHOD, execute.path(), body, execute.stringify);
    });
}
exports.execute = execute;
(function (execute) {
    execute.METHOD = "POST";
    execute.PATH = "/auth/sign-in/kakao";
    execute.ENCRYPTED = {
        request: false,
        response: false,
    };
    execute.path = () => {
        return `/auth/sign-in/kakao`;
    };
    execute.simulate = (connection, body) => __awaiter(this, void 0, void 0, function* () {
        const assert = NestiaSimulator_1.NestiaSimulator.assert({
            method: execute.METHOD,
            host: connection.host,
            path: execute.path()
        });
        assert.body(() => (input => {
            const __is = input => {
                return "object" === typeof input && null !== input && "string" === typeof input.code;
            };
            if (false === __is(input))
                ((input, _path, _exceptionable = true) => {
                    const $guard = typia_1.default.assert.guard;
                    const $ao0 = (input, _path, _exceptionable = true) => "string" === typeof input.code || $guard(_exceptionable, {
                        path: _path + ".code",
                        expected: "string",
                        value: input.code
                    });
                    return ("object" === typeof input && null !== input || $guard(true, {
                        path: _path + "",
                        expected: "IAuthentication.ISignIn",
                        value: input
                    })) && $ao0(input, _path + "", true) || $guard(true, {
                        path: _path + "",
                        expected: "IAuthentication.ISignIn",
                        value: input
                    });
                })(input, "$input", true);
            return input;
        })(body));
    });
    execute.stringify = (input) => (input => { const assert = input => {
        const __is = input => {
            return "object" === typeof input && null !== input && "string" === typeof input.code;
        };
        if (false === __is(input))
            ((input, _path, _exceptionable = true) => {
                const $guard = typia_1.default.assertStringify.guard;
                const $ao0 = (input, _path, _exceptionable = true) => "string" === typeof input.code || $guard(_exceptionable, {
                    path: _path + ".code",
                    expected: "string",
                    value: input.code
                });
                return ("object" === typeof input && null !== input || $guard(true, {
                    path: _path + "",
                    expected: "IAuthentication.ISignIn",
                    value: input
                })) && $ao0(input, _path + "", true) || $guard(true, {
                    path: _path + "",
                    expected: "IAuthentication.ISignIn",
                    value: input
                });
            })(input, "$input", true);
        return input;
    }; const stringify = input => {
        const $string = typia_1.default.assertStringify.string;
        return `{"code":${$string(input.code)}}`;
    }; return stringify(assert(input)); })(input);
})(execute || (exports.execute = execute = {}));
