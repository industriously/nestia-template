"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.getOne = void 0;
/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
const fetcher_1 = require("@nestia/fetcher");
const typia_1 = __importDefault(require("typia"));
const NestiaSimulator_1 = require("./../../utils/NestiaSimulator");
/**
 * this is sample api
 * @summary user find by user id
 * @tag users
 * @param user_id user id
 * @return user info
 * @throw 404 Not Found
 *
 * @controller UsersController.getOne()
 * @path GET /users/:user_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function getOne(connection, user_id) {
    return __awaiter(this, void 0, void 0, function* () {
        return !!connection.simulate
            ? getOne.simulate(connection, user_id)
            : fetcher_1.Fetcher.fetch(connection, getOne.ENCRYPTED, getOne.METHOD, getOne.path(user_id));
    });
}
exports.getOne = getOne;
(function (getOne) {
    getOne.METHOD = "GET";
    getOne.PATH = "/users/:user_id";
    getOne.ENCRYPTED = {
        request: false,
        response: false,
    };
    getOne.path = (user_id) => {
        return `/users/${encodeURIComponent(user_id !== null && user_id !== void 0 ? user_id : "null")}`;
    };
    getOne.random = (g) => (generator => {
        const $generator = typia_1.default.random.generator;
        const $pick = typia_1.default.random.pick;
        const $ro0 = (_recursive = false, _depth = 0) => { var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0; return ({
            type: "normal",
            id: (_d = (_c = (_b = ((_a = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _a !== void 0 ? _a : $generator.customs)) === null || _b === void 0 ? void 0 : _b.string) === null || _c === void 0 ? void 0 : _c.call(_b, [])) !== null && _d !== void 0 ? _d : ((_e = generator === null || generator === void 0 ? void 0 : generator.string) !== null && _e !== void 0 ? _e : $generator.string)(),
            name: (_j = (_h = (_g = ((_f = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _f !== void 0 ? _f : $generator.customs)) === null || _g === void 0 ? void 0 : _g.string) === null || _h === void 0 ? void 0 : _h.call(_g, [])) !== null && _j !== void 0 ? _j : ((_k = generator === null || generator === void 0 ? void 0 : generator.string) !== null && _k !== void 0 ? _k : $generator.string)(),
            email: (_p = (_o = (_m = ((_l = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _l !== void 0 ? _l : $generator.customs)) === null || _m === void 0 ? void 0 : _m.string) === null || _o === void 0 ? void 0 : _o.call(_m, [
                {
                    name: "format",
                    value: "email"
                }
            ])) !== null && _p !== void 0 ? _p : ((_q = generator === null || generator === void 0 ? void 0 : generator.email) !== null && _q !== void 0 ? _q : $generator.email)(),
            created_at: (_u = (_t = (_s = ((_r = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _r !== void 0 ? _r : $generator.customs)) === null || _s === void 0 ? void 0 : _s.string) === null || _t === void 0 ? void 0 : _t.call(_s, [
                {
                    name: "format",
                    value: "date-time"
                }
            ])) !== null && _u !== void 0 ? _u : ((_v = generator === null || generator === void 0 ? void 0 : generator.datetime) !== null && _v !== void 0 ? _v : $generator.datetime)(),
            updated_at: (_z = (_y = (_x = ((_w = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _w !== void 0 ? _w : $generator.customs)) === null || _x === void 0 ? void 0 : _x.string) === null || _y === void 0 ? void 0 : _y.call(_x, [
                {
                    name: "format",
                    value: "date-time"
                }
            ])) !== null && _z !== void 0 ? _z : ((_0 = generator === null || generator === void 0 ? void 0 : generator.datetime) !== null && _0 !== void 0 ? _0 : $generator.datetime)()
        }); };
        const $ro1 = (_recursive = false, _depth = 0) => { var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0; return ({
            type: "admin",
            id: (_d = (_c = (_b = ((_a = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _a !== void 0 ? _a : $generator.customs)) === null || _b === void 0 ? void 0 : _b.string) === null || _c === void 0 ? void 0 : _c.call(_b, [])) !== null && _d !== void 0 ? _d : ((_e = generator === null || generator === void 0 ? void 0 : generator.string) !== null && _e !== void 0 ? _e : $generator.string)(),
            name: (_j = (_h = (_g = ((_f = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _f !== void 0 ? _f : $generator.customs)) === null || _g === void 0 ? void 0 : _g.string) === null || _h === void 0 ? void 0 : _h.call(_g, [])) !== null && _j !== void 0 ? _j : ((_k = generator === null || generator === void 0 ? void 0 : generator.string) !== null && _k !== void 0 ? _k : $generator.string)(),
            email: (_p = (_o = (_m = ((_l = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _l !== void 0 ? _l : $generator.customs)) === null || _m === void 0 ? void 0 : _m.string) === null || _o === void 0 ? void 0 : _o.call(_m, [
                {
                    name: "format",
                    value: "email"
                }
            ])) !== null && _p !== void 0 ? _p : ((_q = generator === null || generator === void 0 ? void 0 : generator.email) !== null && _q !== void 0 ? _q : $generator.email)(),
            created_at: (_u = (_t = (_s = ((_r = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _r !== void 0 ? _r : $generator.customs)) === null || _s === void 0 ? void 0 : _s.string) === null || _t === void 0 ? void 0 : _t.call(_s, [
                {
                    name: "format",
                    value: "date-time"
                }
            ])) !== null && _u !== void 0 ? _u : ((_v = generator === null || generator === void 0 ? void 0 : generator.datetime) !== null && _v !== void 0 ? _v : $generator.datetime)(),
            updated_at: (_z = (_y = (_x = ((_w = generator === null || generator === void 0 ? void 0 : generator.customs) !== null && _w !== void 0 ? _w : $generator.customs)) === null || _x === void 0 ? void 0 : _x.string) === null || _y === void 0 ? void 0 : _y.call(_x, [
                {
                    name: "format",
                    value: "date-time"
                }
            ])) !== null && _z !== void 0 ? _z : ((_0 = generator === null || generator === void 0 ? void 0 : generator.datetime) !== null && _0 !== void 0 ? _0 : $generator.datetime)()
        }); };
        return $pick([
            () => $ro1(),
            () => $ro0()
        ])();
    })(g);
    getOne.simulate = (connection, user_id) => __awaiter(this, void 0, void 0, function* () {
        const assert = NestiaSimulator_1.NestiaSimulator.assert({
            method: getOne.METHOD,
            host: connection.host,
            path: getOne.path(user_id)
        });
        assert.param("user_id")("string")(() => (input => {
            const __is = input => {
                return "string" === typeof input;
            };
            if (false === __is(input))
                ((input, _path, _exceptionable = true) => {
                    const $guard = typia_1.default.assert.guard;
                    return "string" === typeof input || $guard(true, {
                        path: _path + "",
                        expected: "string",
                        value: input
                    });
                })(input, "$input", true);
            return input;
        })(user_id));
        return getOne.random(typeof connection.simulate === 'object' &&
            connection.simulate !== null
            ? connection.simulate
            : undefined);
    });
})(getOne || (exports.getOne = getOne = {}));
/**
 * @controller UsersController.create()
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function create(connection, body) {
    return __awaiter(this, void 0, void 0, function* () {
        return !!connection.simulate
            ? create.simulate(connection, body)
            : fetcher_1.Fetcher.fetch(connection, create.ENCRYPTED, create.METHOD, create.path(), body, create.stringify);
    });
}
exports.create = create;
(function (create) {
    create.METHOD = "POST";
    create.PATH = "/users";
    create.ENCRYPTED = {
        request: false,
        response: false,
    };
    create.path = () => {
        return `/users`;
    };
    create.simulate = (connection, body) => __awaiter(this, void 0, void 0, function* () {
        const assert = NestiaSimulator_1.NestiaSimulator.assert({
            method: create.METHOD,
            host: connection.host,
            path: create.path()
        });
        assert.body(() => (input => {
            const __is = input => {
                const $is_email = typia_1.default.assert.is_email;
                return "object" === typeof input && null !== input && ("string" === typeof input.email && $is_email(input.email) && "string" === typeof input.name && "string" === typeof input.password);
            };
            if (false === __is(input))
                ((input, _path, _exceptionable = true) => {
                    const $guard = typia_1.default.assert.guard;
                    const $is_email = typia_1.default.assert.is_email;
                    const $ao0 = (input, _path, _exceptionable = true) => ("string" === typeof input.email && ($is_email(input.email) || $guard(_exceptionable, {
                        path: _path + ".email",
                        expected: "string (@format email)",
                        value: input.email
                    })) || $guard(_exceptionable, {
                        path: _path + ".email",
                        expected: "string",
                        value: input.email
                    })) && ("string" === typeof input.name || $guard(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    })) && ("string" === typeof input.password || $guard(_exceptionable, {
                        path: _path + ".password",
                        expected: "string",
                        value: input.password
                    }));
                    return ("object" === typeof input && null !== input || $guard(true, {
                        path: _path + "",
                        expected: "IUser.ICreate1",
                        value: input
                    })) && $ao0(input, _path + "", true) || $guard(true, {
                        path: _path + "",
                        expected: "IUser.ICreate1",
                        value: input
                    });
                })(input, "$input", true);
            return input;
        })(body));
    });
    create.stringify = (input) => (input => { const assert = input => {
        const __is = input => {
            const $is_email = typia_1.default.assertStringify.is_email;
            return "object" === typeof input && null !== input && ("string" === typeof input.email && $is_email(input.email) && "string" === typeof input.name && "string" === typeof input.password);
        };
        if (false === __is(input))
            ((input, _path, _exceptionable = true) => {
                const $guard = typia_1.default.assertStringify.guard;
                const $is_email = typia_1.default.assertStringify.is_email;
                const $ao0 = (input, _path, _exceptionable = true) => ("string" === typeof input.email && ($is_email(input.email) || $guard(_exceptionable, {
                    path: _path + ".email",
                    expected: "string (@format email)",
                    value: input.email
                })) || $guard(_exceptionable, {
                    path: _path + ".email",
                    expected: "string",
                    value: input.email
                })) && ("string" === typeof input.name || $guard(_exceptionable, {
                    path: _path + ".name",
                    expected: "string",
                    value: input.name
                })) && ("string" === typeof input.password || $guard(_exceptionable, {
                    path: _path + ".password",
                    expected: "string",
                    value: input.password
                }));
                return ("object" === typeof input && null !== input || $guard(true, {
                    path: _path + "",
                    expected: "IUser.ICreate1",
                    value: input
                })) && $ao0(input, _path + "", true) || $guard(true, {
                    path: _path + "",
                    expected: "IUser.ICreate1",
                    value: input
                });
            })(input, "$input", true);
        return input;
    }; const stringify = input => {
        const $string = typia_1.default.assertStringify.string;
        const $is_email = typia_1.default.assertStringify.is_email;
        return `{"email":${$string(input.email)},"name":${$string(input.name)},"password":${$string(input.password)}}`;
    }; return stringify(assert(input)); })(input);
})(create || (exports.create = create = {}));
